'use client';

import React, { useState } from 'react';
import CodeDocPage from '@/components/page-template/CodeDocPage';
import { introToEtlDocs } from '../../../constants';

const DataVizPage = () => {
  // Line 8 for local, Line 9 for docker, Line 10 only has boilerplate code for docker
  // const [code, setCode] = useState("# Import required libraries\nimport sys\nimport psycopg2\nimport plotly.express as px\nimport plotly.io as pio\nimport pandas as pd\n\ntry:\n  sys.stdout.reconfigure(encoding='utf-8')\n\n  # Database connection parameters\n  db_params = {\n    'dbname': 'db',\n    'user': 'postgres',\n    'password': 'password',\n    'host': 'localhost',\n    'port': '5430'\n  }\n\n  # Initialize an empty DataFrame\n  df = pd.DataFrame()\n\n  try:\n    # Establish a connection to the PostgreSQL database\n    connection = psycopg2.connect(**db_params)\n    cursor = connection.cursor()\n\n    # Get all the data that you have loaded in the ETL step\n    cursor.execute(\"SELECT * FROM healthcare;\")\n\n    # Fetch the result of the query\n    data = cursor.fetchall()\n\n    # Get column names\n    colnames = [desc[0] for desc in cursor.description]\n\n    # Store data in a DataFrame\n    df = pd.DataFrame(data, columns=colnames)\n\n    # Close the cursor and connection\n    cursor.close()\n    connection.close()\n  except (Exception, psycopg2.DatabaseError) as error:\n    # This will be printed if there is error connecting to the database\n    print(f\"Error connecting to PostgreSQL database: {error}\")\n\n  # Get only the singapore data\n  # Technically, all the data in this df is for Singapore\n  df_sg = df.query('country==\"singapore\"')\n\n  # Group by 'disease' and sum the 'no_of_cases'\n  df_grouped = df_sg.groupby('disease', as_index=False)['no_of_cases'].sum()\n\n  # Sort the aggregated data by 'no_of_cases' in descending order\n  df_sorted = df_grouped.sort_values(by='no_of_cases', ascending=False)\n\n  # Get the top 10 diseases\n  df_top10 = df_sorted.head(10)\n\n  # Create the bar plot\n  bar_fig = px.bar(df_top10, x=\"disease\", y=\"no_of_cases\", title=\"Top 10 Diseases in Singapore\")\n\n  # Print the html for this bar plot to display it on the right side of this page\n  bar_plot_html = pio.to_html(bar_fig, full_html=True, include_plotlyjs=True)\n  print(bar_plot_html)\n\nexcept Exception as error:\n  # To catch and print any error\n  print(f\"Error: {error}\")");
  // const [code, setCode] = useState("# Import required libraries\nimport sys\nimport psycopg2\nimport plotly.express as px\nimport plotly.io as pio\nimport pandas as pd\n\ntry:\n  sys.stdout.reconfigure(encoding='utf-8')\n\n  # Database connection parameters\n  db_params = {\n    'dbname': 'db',\n    'user': 'postgres',\n    'password': 'password',\n    'host': 'db',\n    'port': '5432'\n  }\n\n  # Initialize an empty DataFrame\n  df = pd.DataFrame()\n\n  try:\n    # Establish a connection to the PostgreSQL database\n    connection = psycopg2.connect(**db_params)\n    cursor = connection.cursor()\n\n    # Get all the data that you have loaded in the ETL step\n    cursor.execute(\"SELECT * FROM healthcare;\")\n\n    # Fetch the result of the query\n    data = cursor.fetchall()\n\n    # Get column names\n    colnames = [desc[0] for desc in cursor.description]\n\n    # Store data in a DataFrame\n    df = pd.DataFrame(data, columns=colnames)\n\n    # Close the cursor and connection\n    cursor.close()\n    connection.close()\n  except (Exception, psycopg2.DatabaseError) as error:\n    # This will be printed if there is error connecting to the database\n    print(f\"Error connecting to PostgreSQL database: {error}\")\n\n  # Get only the singapore data\n  # Technically, all the data in this df is for Singapore\n  df_sg = df.query('country==\"singapore\"')\n\n  # Group by 'disease' and sum the 'no_of_cases'\n  df_grouped = df_sg.groupby('disease', as_index=False)['no_of_cases'].sum()\n\n  # Sort the aggregated data by 'no_of_cases' in descending order\n  df_sorted = df_grouped.sort_values(by='no_of_cases', ascending=False)\n\n  # Get the top 10 diseases\n  df_top10 = df_sorted.head(10)\n\n  # Create the bar plot\n  bar_fig = px.bar(df_top10, x=\"disease\", y=\"no_of_cases\", title=\"Top 10 Diseases in Singapore\")\n\n  # Print the html for this bar plot to display it on the right side of this page\n  bar_plot_html = pio.to_html(bar_fig, full_html=True, include_plotlyjs=True)\n  print(bar_plot_html)\n\nexcept Exception as error:\n  # To catch and print any error\n  print(f\"Error: {error}\")");
  const [code, setCode] = useState("# Import required libraries\nimport sys\nimport psycopg2\nimport plotly.express as px\nimport plotly.io as pio\nimport pandas as pd\n\n# Outer try\ntry:\n  sys.stdout.reconfigure(encoding='utf-8')\n\n  # Database connection parameters\n  db_params = {\n    'dbname': 'db',\n    'user': 'postgres',\n    'password': 'password',\n    'host': 'db',\n    'port': '5432'\n  }\n\n  # Initialize an empty DataFrame\n  df = pd.DataFrame()\n\n  # Inner try\n  # Any errors from this try will be caught and system exits right away\n  try:\n    # Establish a connection to the PostgreSQL database\n    connection = psycopg2.connect(**db_params)\n    cursor = connection.cursor()\n\n    # Get all the data that you have loaded in the ETL step\n    cursor.execute(\"SELECT * FROM healthcare;\")\n\n    # Fetch the result of the query\n    data = cursor.fetchall()\n\n    # Get column names\n    colnames = [desc[0] for desc in cursor.description]\n\n    # Store data in a DataFrame\n    df = pd.DataFrame(data, columns=colnames)\n\n    # Close the cursor and connection\n    cursor.close()\n    connection.close()\n  except psycopg2.DatabaseError as error:\n    print(f\"PostgreSQL database errors from the inner try: {error}\")\n    sys.exit(0)\n  except Exception as error:\n    print(f\"Generic errors from the inner try: {error}\")\n    sys.exit(0)\n\n  # TODO1: Get only the singapore data\n  # (Technically, all the data in this df is for Singapore)\n  df_sg = \n\n  # TODO2: Group by 'disease' and sum the 'no_of_cases'\n  df_grouped = \n\n  # TODO3: Sort the aggregated data by 'no_of_cases' in descending order\n  df_sorted = \n\n  # TODO4: Get the top 10 diseases\n  df_top10 = \n\n  # TODO5: Create the bar plot\n  bar_fig = \n\n  # Print the html for this bar plot to display it on the right side of this page\n  bar_plot_html = pio.to_html(bar_fig, full_html=True, include_plotlyjs=True)\n  print(bar_plot_html)\n\nexcept Exception as error:\n  print(f\"Error: {error}\")");
  const [html, setHtml] = useState("Output will be displayed here after you execute your code.");

  return (
    <CodeDocPage 
      code={code}
      setCode={setCode}
      html={html}
      setHtml={setHtml}
      url={introToEtlDocs['Data Visualisation']}
    />    
  );
};

export default DataVizPage;
