# https://www.docker.com/blog/how-to-use-the-postgres-docker-official-image/
# version: '3.8'

services:
  db:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=${PSQL_PASSWORD}
      - PGUSER=${PSQL_USER}
      - POSTGRES_DB=${PSQL_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - 5430:5432

  mageai:
    image: mageai/mageai
    container_name: mageai
    ports:
      - 6789:6789
    deploy:
      resources:
        limits:
          cpus: '0.5'

  web_fe:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: web_fe
    ports:
      - "3000:3000"
    env_file: .env
    deploy:
      resources:
        limits:
          cpus: '0.5'

  db_be:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: db_be
    ports:
      - "4000:4000"
    depends_on:
      - db
    env_file: .env

  execution_be:
    build:
      context: ./execution
      dockerfile: Dockerfile
    container_name: execution_be
    ports:
      - 5000:5000
    env_file: .env
    deploy:
      resources:
        limits:
          cpus: '0.5'

  llm_be:
    build:
      context: ./llm
      dockerfile: Dockerfile
    container_name: llm_be
    ports:
      - "7000:7000"
    env_file: .env

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "healthcare-topic"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/kafka/9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  streaming-data:
    build:
      context: ./streaming-data
      dockerfile: Dockerfile
    container_name: streaming-data_be
    depends_on:
      kafka:
        condition: service_healthy
 
volumes:
  pgdata: