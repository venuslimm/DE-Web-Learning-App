{
  "type": "doc",
  "content": [
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Moving on to data visualization using Python, let’s take a look at the given boilerplate code on the left of the screen 👈:"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ],
                  "text": "Lines 1 to 6"
                },
                {
                  "type": "text",
                  "text": ": Imports all the required libraries to our code"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ],
                          "text": "sys"
                        },
                        {
                          "type": "text",
                          "text": ": Configuration purposes"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ],
                          "text": "psycopg2"
                        },
                        {
                          "type": "text",
                          "text": ": Connects to a PostgreSQL database"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ],
                          "text": "plotly"
                        },
                        {
                          "type": "text",
                          "text": ": Used to create data visualisations"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "marks": [
                            {
                              "type": "bold"
                            }
                          ],
                          "text": "pandas"
                        },
                        {
                          "type": "text",
                          "text": ": Used to store our data after retrieving from the database"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ],
                  "text": "Lines 9-74"
                },
                {
                  "type": "text",
                  "text": ": A try-except block that will catch any thrown errors inside the try block from lines 10-72 (excluding the inner try-except block from lines 26-51) and print them out for debugging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ],
                  "text": "Lines 13-45"
                },
                {
                  "type": "text",
                  "text": ": Establishes the connection to the database where our data was loaded to in the previous section of this course (ETL)"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "After establishing a connection, we will get all the rows from the table that has our data and store them into a "
                        },
                        {
                          "type": "text",
                          "marks": [
                            {
                              "type": "link",
                              "attrs": {
                                "href": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html",
                                "target": "_blank",
                                "rel": "noopener noreferrer nofollow",
                                "class": null
                              }
                            }
                          ],
                          "text": "pandas DataFrame"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "marks": [
                    {
                      "type": "bold"
                    }
                  ],
                  "text": "Lines 53-67"
                },
                {
                  "type": "text",
                  "text": ": Highlight of this section of the course! We will create a bar plot to show the top infectious diseases in Singapore"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The following is the metadata of the columns in the "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "healthcare"
        },
        {
          "type": "text",
          "text": " table created in the previous section (ETL):"
        }
      ]
    },
    {
      "type": "orderedList",
      "attrs": {
        "start": 1
      },
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "disease [String]"
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "_year [Integer]"
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "no_of_cases [Integer]"
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "country [String]"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Now that we understand what the boilerplate code does and the metadata of the columns in the "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "healthcare"
        },
        {
          "type": "text",
          "text": " table, let’s start coding!"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "⚠️ Do not copy the code from the document to the code editor."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "⚠️ You may use DEBot for technical queries."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "⚠️ The 5 TODOs below can be found as comments in the code editor on the left of this page."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "TODO1:"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "When this code is executed later on, at line 55, we will have all our data stored in "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "df"
        },
        {
          "type": "text",
          "text": ". However, this data might not only consists of ‘Singapore’ data but also other countries' data (depending on what country’s data was fed into the pipeline previously). "
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Since we are interested in Singapore dataset, lets extract out using this code:"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": null
      },
      "content": [
        {
          "type": "text",
          "text": "df_sg = df.query('country==\"singapore\"')"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "href": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.query.html",
                "target": "_blank",
                "rel": "noopener noreferrer nofollow",
                "class": null
              }
            }
          ],
          "text": "DataFrame.query"
        },
        {
          "type": "text",
          "text": " will query the column (in this case "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“country”"
        },
        {
          "type": "text",
          "text": ") and check if the value is "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“singapore\""
        },
        {
          "type": "text",
          "text": ". It will then return all the rows whereby its column value is "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“singapore\""
        },
        {
          "type": "text",
          "text": "."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "TODO2:"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Since we want to know the total number of cases for each disease, we need to group all the data based on the column "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“disease”"
        },
        {
          "type": "text",
          "text": " and then for each disease, sum their "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“no_of_cases”"
        },
        {
          "type": "text",
          "text": "."
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": null
      },
      "content": [
        {
          "type": "text",
          "text": "df_grouped = df_sg.groupby('disease', as_index=False)['no_of_cases'].sum()"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "href": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.groupby.html",
                "target": "_blank",
                "rel": "noopener noreferrer nofollow",
                "class": null
              }
            }
          ],
          "text": "DataFrame.groupby"
        },
        {
          "type": "text",
          "text": " will group the data by the column "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“disease”"
        },
        {
          "type": "text",
          "text": " and keep this column as a regular column instead of index."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "TODO3:"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Since we want to plot the graph such that we can see which are the top infectious disease, we need to sort it in descending order, so that the diseases with more cases will be on the left of the graph."
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": null
      },
      "content": [
        {
          "type": "text",
          "text": "df_sorted = df_grouped.sort_values(by='no_of_cases', ascending=False)"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "href": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.sort_values.html",
                "target": "_blank",
                "rel": "noopener noreferrer nofollow",
                "class": null
              }
            }
          ],
          "text": "DataFrame.sort_values"
        },
        {
          "type": "text",
          "text": " will sort the data in the DataFrame according to the values in the column "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“no_of_cases”"
        },
        {
          "type": "text",
          "text": " in descending order."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "TODO4:"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Since there are many different types of infectious diseases and we don’t want our graph to be cluttered, we will just get the top 10 infectious diseases and plot them onto our graph later on."
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": null
      },
      "content": [
        {
          "type": "text",
          "text": "df_top10 = df_sorted.head(10)"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "href": "https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.head.html",
                "target": "_blank",
                "rel": "noopener noreferrer nofollow",
                "class": null
              }
            }
          ],
          "text": "DataFrame.head"
        },
        {
          "type": "text",
          "text": " returns the first 10 rows of "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "df_sorted"
        },
        {
          "type": "text",
          "text": " based on position."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "TODO5:"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Now that our DataFrame ("
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "df_top10"
        },
        {
          "type": "text",
          "text": ") is ready, let’s create a bar plot for it."
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": null
      },
      "content": [
        {
          "type": "text",
          "text": "bar_fig = px.bar(df_top10, x=\"disease\", y=\"no_of_cases\", title=\"Top 10 Diseases in Singapore\")"
        }
      ]
    },
    {
      "type": "paragraph"
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "marks": [
            {
              "type": "link",
              "attrs": {
                "href": "http://px.bar",
                "target": "_blank",
                "rel": "noopener noreferrer nofollow",
                "class": null
              }
            }
          ],
          "text": "px.bar"
        },
        {
          "type": "text",
          "text": " returns a bar figure for DataFrame "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "df_top10"
        },
        {
          "type": "text",
          "text": ", where the x-axis of the bar graph is column "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“disease”"
        },
        {
          "type": "text",
          "text": " and y-axis is column "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "“no_of_cases”"
        },
        {
          "type": "text",
          "text": ". To make the graph more intuitive, we will add a title too."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Now that you have completed your code, go ahead and execute using the button that says "
        },
        {
          "type": "text",
          "marks": [
            {
              "type": "bold"
            }
          ],
          "text": "‘EXECUTE’"
        },
        {
          "type": "text",
          "text": " right above the code editor and after a few seconds, you should see the output (bar graph) above this guide."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Good job on completing this section 🏆! You may proceed to the next section ➡️."
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": " "
        }
      ]
    }
  ]
}